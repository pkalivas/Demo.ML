#!csharp

#r "nuget: Radiate, 1.0.3"
#r "nuget: Radiate.Data, 1.0.2"

#!csharp

static string PrintImage(float[] mnistRow, string c = "*")
{
    var image = "\n";
    for (var i = 0; i < 28; i++)
    {
        var row = "";
        for (var j = 0; j < 28; j++)
        {
            row += mnistRow[i * 28 + j] > 0 ? c : " ";
        }

        image += string.IsNullOrWhiteSpace(row) ? "" : row + "\n";
    }

    return image;
}

#!csharp

using System.Linq;
using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;
using Radiate.Data;
using Radiate.IO.Wraps;
using Radiate.Optimizers;
using Radiate.Optimizers.Supervised.Perceptrons;

#!csharp

var fileLocation = Path.Join(Environment.CurrentDirectory, "Models", "MultiLayerPerceptron.json");
var contents = await File.ReadAllTextAsync(fileLocation);
var convNetWrap = JsonConvert.DeserializeObject<OptimizerWrap>(contents);

var convNet = Optimizer<MultiLayerPerceptron>.Load(convNetWrap);
var (rawInputs, rawLabels) = await new Mnist().GetDataSet();

#!csharp

var rand = new Random();
var index = rand.Next(0, rawInputs.Count);
var (input, target) = (rawInputs[index], rawLabels[index]);

var prediction = convNet.Predict(input);

Console.WriteLine($"Predicted: {prediction.Classification} Truth: {target.First()} Confidence: {prediction.Confidence:P2}");
Console.WriteLine($"{PrintImage(input)}");

#!markdown

```c#
using Radiate.Activations;
using Radiate.Data;
using Radiate.Optimizers;
using Radiate.Optimizers.Supervised.Perceptrons;
using Radiate.Optimizers.Supervised.Perceptrons.Info;
using Radiate.Records;
using Radiate.Tensors;
using Radiate.Tensors.Enums;

const int featureLimit = 5000;
const int batchSize = 128;
const int maxEpochs = 25;

var (rawInputs, rawLabels) = await new Mnist(featureLimit).GetDataSet();

var pair = new TensorTrainSet(rawInputs, rawLabels)
    .Reshape(new Shape(28, 28, 1))
    .TransformFeatures(Norm.Image)
    .TransformTargets(Norm.OHE)
    .Batch(batchSize)
    .Split();

var neuralNetwork = new MultiLayerPerceptron()
    .AddLayer(new ConvInfo(64, 3))
    .AddLayer(new MaxPoolInfo(2))
    .AddLayer(new FlattenInfo())
    .AddLayer(new DenseInfo(64, Activation.Sigmoid))
    .AddLayer(new DenseInfo(pair.OutputCategories, Activation.SoftMax));

var optimizer = new Optimizer<MultiLayerPerceptron>(neuralNetwork, pair);

await optimizer.Train(epoch => 
{
    Console.WriteLine($"\r{epoch}");
    return maxEpochs == epoch.Index;
});

```
