#!csharp

#r "dlls\Radiate.dll"
#r "dlls\Radiate.Data.dll"
#r "dlls\Charting.dll"
#r "nuget: XPlot.Plotly.Interactive, 4.0.6"

#!csharp

using System.Linq;
using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;
using Radiate.Domain.Records;
using Radiate.Data.Utils;
using Radiate.Data.Models;
using Radiate.Domain.Tensors;
using Radiate.Domain.Extensions;
using Radiate.Domain.Models;
using Radiate.Optimizers.Unsupervised.Clustering;
using Radiate.Optimizers;

#!csharp

var fileName = $"{Environment.CurrentDirectory}\\data\\BlobCluster\\blob.csv";
var contents = await File.ReadAllTextAsync(fileName);

var features = new List<float[]>();
var labels = new List<float[]>();
foreach (var row in contents.Split("\n").Skip(1))
{
    var columns = row
        .Split(",")
        .Skip(1)
        .Select(Convert.ToSingle)
        .ToList();

    features.Add(columns.Take(columns.Count - 1).ToArray());
    labels.Add(columns.Skip(columns.Count - 1).ToArray());
}

#!csharp

const int maxEpoch = 100;

var pair = new TensorTrainSet(features, labels);

var kMeans = new KMeans(pair.OutputCategories);
var optimizer = new Optimizer<KMeans>(kMeans, pair);

await optimizer.Train(epoch =>
{
    return epoch.Index == maxEpoch || epoch.AverageLoss == 0 && epoch.RegressionAccuracy > 0;
});

var validator = new Validator();
var acc = validator.Validate(optimizer.Model, pair.TrainingInputs);

var wrap = optimizer.Model.Save();
var path = $"{Environment.CurrentDirectory}\\models\\kmeans.json";
var content = JsonConvert.SerializeObject(wrap);

await File.WriteAllTextAsync(path, content);

Console.WriteLine($"\nLoss: {acc.AverageLoss} Accuracy {acc.RegressionAccuracy}");

#!csharp

var fileLocation = $"{Environment.CurrentDirectory}\\Models\\kmeans.json";
var contents = await File.ReadAllTextAsync(fileLocation);
var kMeansWrap = JsonConvert.DeserializeObject<UnsupervisedWrap>(contents);

var kMeans = new KMeans(kMeansWrap);

var validator = new Validator();
var acc = validator.Validate(optimizer.Model, pair.TrainingInputs);
Console.WriteLine($"\nLoss: {acc.AverageLoss} Accuracy {acc.RegressionAccuracy}");

#!csharp

using Charting;

var points = features.Select(f => f.ToList()).ToList();
var centers = kMeansWrap.KMeansWrap.Centroids;
var c = centers.Select(r => r.ToList()).ToList();
var chart = Charting.ChartingService.GetChart(kMeansWrap.KMeansWrap.Clusters, c, points);

chart.GetHtml()
