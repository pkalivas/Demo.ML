#!csharp

#r "dlls\Charting.dll"
#r "nuget: Radiate, 1.0.6"
#r "nuget: XPlot.Plotly.Interactive, 4.0.6"

#!csharp

using System.Linq;
using System;
using System.IO;
using System.Collections.Generic;
using XPlot.Plotly;
using Radiate.Extensions;
using Charting;

#!markdown

## Supervised Learning using a Regression.

#### 1.  Problem Definition 
- Given surrounding community housing attributes, I want to predict the price of a house in $1000s.
#### 2. Data Collection
- Load the data in from a CSV file. 
- Using the first 13 columns, I want to predict the 14th column.

#!csharp

var fileName = $"{Environment.CurrentDirectory}\\BostonHousing\\Boston.csv";
var contents = await File.ReadAllTextAsync(fileName);

var features = new List<List<float>>();
var labels = new List<List<float>>();
foreach (var row in contents.Split("\n").Skip(1))
{
    var columns = row
        .Split(",")
        .Skip(1)
        .Select(Convert.ToSingle)
        .ToList();

    features.Add(columns.Take(columns.Count - 1).ToList());
    labels.Add(columns.Skip(columns.Count - 1).ToList());
}

$"The dataset consists of {features.Count} rows with {features.First().Count} columns"

#!markdown

#### 3. Feature Engineering
- Standardize the input data
- Spilt the dataset into a training set containing 75% of the original data and testing set of 25% of the original data

#!csharp

var splitPct = .75;

var splitIndex = (int) (features.Count - (features.Count * splitPct));

var normalizedInputs = features.Select(row => row.ToArray()).ToList().Standardize();
var rawLabels = labels.Select(lab => lab.ToArray()).ToList();
var inputSize = normalizedInputs.Select(input => input.Length).Distinct().Single();
var outputSize = labels.Select(lab => lab.Count).Distinct().Single();

var trainFeatures = normalizedInputs.Skip(splitIndex).ToList();
var trainTargets = rawLabels.Skip(splitIndex).ToList();
var testFeatures = normalizedInputs.Take(splitIndex).ToList();
var testTargets = rawLabels.Take(splitIndex).ToList();

$"The training data has {trainFeatures.Count} rows and the testing data has {testFeatures.Count} rows"

#!markdown

#### 4. Model Implementation
- Build a regression model

#!markdown

The weights and biases here are the model's parameters. We need to adjust the values so they produce acceptable values on testing and training data.
It is common and best practice to initialize these parameters randomly in the range of -1 to 1

#!csharp

var weights = new float[outputSize, inputSize];
var biases = new float[outputSize];

var rand = new Random();
for (var i = 0; i < outputSize; i++)
{
    biases[i] = (float) rand.NextDouble() * 2 - 1;
    for (var j = 0; j < inputSize; j++)
    {
        weights[i, j] = (float) rand.NextDouble() * 2 - 1;
    }
}

#!markdown

Once we give the model (weights and biases) a row of data, we calculate the error between the model's output and the actual value (the 14th column from our dataset). 
Using this error, we adjust the model's parameters (weights and biases) little by little.

#!csharp

public float[] CalculateError(float[] outputs, float[] trueTargets)
{
    var result = new List<float>();

    foreach (var (guess, target) in outputs.Zip(trueTargets))
    {
        result.Add(target - guess);
    }

    return result.ToArray();
}

#!markdown

Feed a row of data from our dataset into our model to produce an output.

#!csharp

public float[] PassForwardInput(float[] inputs)
{
    var result = new float[outputSize];

    for (var i = 0; i < outputSize; i++)
    {
        result[i] = inputs.Select((value, index) => weights[i, index] * value).Sum() + biases[i];
    }

    return result;
}

#!markdown

Given our error we calculated above, the input we gave the model, and a learning rate, adjust the model's parameters to come closer to the actual value or value we are expecting.

#!csharp

public void UpdateParameters(float[] errors, float[] previousInput, float learningRate)
{
    for (var i = 0; i < outputSize; i++)
    {
        biases[i] += errors[i] * learningRate;

        for (var j = 0; j < inputSize; j++)
        {
            weights[i, j] += errors[i] * previousInput[j] * learningRate;
        }
    }
}

#!markdown

Define a way to score each epoch. There are better ways to analyze regression results, but for our purposes the % accuracy will work just fine.
- Given our predictions and the values we want them to be (targets), how accurate is our model?

#!csharp

public static float RegressionAccuracy(List<float[]> predictions, List<float[]> targets)
{
    var targetTotal = targets.Sum(tar => tar.First());
    var absoluteDifference = predictions.Zip(targets)
        .Select(pair => Math.Abs(pair.Second.First() - pair.First.First()))
        .Sum();

    return (targetTotal - absoluteDifference) / targetTotal;
}

#!markdown

#### 5. Model Training
- Train the model over 50 epochs, meaning the model will see the whole training dataset 50 times.

#!csharp

var learningRate = 0.001f; // learning rates are used to scale errors so we can adjust the model's parameters by a small amount.
var maxEpochs = 50;

// Keep track of how accurate the model is over each epoch and what the errors are on each epoch.
var epochLosses = new List<float>();
var epochAccuracy = new List<float>();

foreach (var epoch in Enumerable.Range(0, maxEpochs))
{
    var epochTotalError = 0f;
    var passPredictions = new List<float[]>();
    foreach (var (input, target) in trainFeatures.Zip(trainTargets))
    {
        // Give our model a row of data to get it's prediction
        var prediction = PassForwardInput(input);

        // Calculate the error between our prediction and the true value 
        var errors = DifferenceError(prediction, target);

        // Update the weights and biases (model's parameters) 
        PassBackErrors(errors, input, learningRate); 

        epochTotalError += errors.Sum();
        passPredictions.Add(prediction);
    }

    epochAccuracy.Add(RegressionAccuracy(passPredictions, trainTargets));
    epochLosses.Add(epochTotalError);

    if (epoch % 10 == 0)
    {
        Console.WriteLine($"Epoch {epoch} loss: {epochLosses.Last()}");
    }
}

#!markdown

#### 6. Model Evaluation
- Predict the training data and the testing data, then find out the % accuracy we have.

#!csharp

var trainPredictions = trainFeatures.Select(row => PassForwardInput(row)).ToList();
var testPredictions = testFeatures.Select(row => PassForwardInput(row)).ToList();

#!csharp

var trainAccuracy = RegressionAccuracy(trainPredictions, trainTargets);
var testAccuracy = RegressionAccuracy(testPredictions, testTargets);

$"Train Accuracy {trainAccuracy} Test Accuracy {testAccuracy}"

#!csharp

ChartingService.GetChart(new ChartRequest
{
    Title = "Training Loss Performance",
    YOneName = "Train Epoch Loss",
    YTwoName = "Train Regression Accuracy",
    YOneData = epochLosses.Select(val => Math.Abs(val)).ToList(),
    YTwoData = epochAccuracy.Select(val => val).ToList(),
})

#!csharp

ChartingService.GetChart(new ChartRequest
{
    Title = "Train Predictions vs. Train Actual",
    YOneName = "Train Predictions",
    YTwoName = "Train Targets",
    YOneData = trainPredictions.Select(pred => pred.Single()).ToList(),
    YTwoData = trainTargets.Select(pred => pred.Single()).ToList()
})

#!csharp

ChartingService.GetChart(new ChartRequest
{
    Title = "Test Predictions vs. Test Actual",
    YOneName = "Test Predictions",
    YTwoName = "Test Targets",
    YOneData = testPredictions.Select(pred => pred.Single()).ToList(),
    YTwoData = testTargets.Select(pred => pred.Single()).ToList()
})
